#!/bin/bash

# EL-BAR YÃ¶netim Sistemi - Otomatik Kurulum Script'i
# Bu script'i root yetkisi ile Ã§alÄ±ÅŸtÄ±rÄ±n: sudo bash install.sh

set -e  # Hata durumunda dur

echo "=================================="
echo "EL-BAR Kurulum BaÅŸlatÄ±lÄ±yor..."
echo "=================================="

# Renkler
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Hata fonksiyonu
error() {
    echo -e "${RED}HATA: $1${NC}"
    exit 1
}

# BaÅŸarÄ± fonksiyonu
success() {
    echo -e "${GREEN}âœ“ $1${NC}"
}

# UyarÄ± fonksiyonu
warning() {
    echo -e "${YELLOW}âš  $1${NC}"
}

# PHP versiyonunu kontrol et
echo ""
echo "1. PHP Versiyonu KontrolÃ¼..."
PHP_VERSION=$(php -r "echo PHP_VERSION;" | cut -d. -f1,2)
if (( $(echo "$PHP_VERSION < 8.2" | bc -l) )); then
    error "PHP 8.2 veya Ã¼zeri gerekli. Mevcut versiyon: $PHP_VERSION"
else
    success "PHP Versiyonu: $PHP_VERSION"
fi

# Composer kontrolÃ¼
echo ""
echo "2. Composer KontrolÃ¼..."
if ! command -v composer &> /dev/null; then
    error "Composer yÃ¼klÃ¼ deÄŸil. LÃ¼tfen Ã¶nce Composer'Ä± yÃ¼kleyin."
else
    success "Composer yÃ¼klÃ¼"
fi

# Proje dizinine git
PROJECT_DIR=$(pwd)
echo ""
echo "3. Proje Dizini: $PROJECT_DIR"

# BaÄŸÄ±mlÄ±lÄ±klarÄ± yÃ¼kle
echo ""
echo "4. Composer BaÄŸÄ±mlÄ±lÄ±klarÄ± YÃ¼kleniyor..."
composer install --optimize-autoloader --no-dev || error "Composer install baÅŸarÄ±sÄ±z"
success "Composer baÄŸÄ±mlÄ±lÄ±klarÄ± yÃ¼klendi"

# .env dosyasÄ±nÄ± oluÅŸtur
echo ""
echo "5. Environment DosyasÄ± OluÅŸturuluyor..."
if [ ! -f .env ]; then
    cp .env.example .env || error ".env dosyasÄ± oluÅŸturulamadÄ±"
    success ".env dosyasÄ± oluÅŸturuldu"
else
    warning ".env dosyasÄ± zaten mevcut, atlanÄ±yor"
fi

# Uygulama anahtarÄ± oluÅŸtur
echo ""
echo "6. Uygulama AnahtarÄ± OluÅŸturuluyor..."
php artisan key:generate --force || error "Key generate baÅŸarÄ±sÄ±z"
success "Uygulama anahtarÄ± oluÅŸturuldu"

# VeritabanÄ± bilgilerini al
echo ""
echo "7. VeritabanÄ± AyarlarÄ±..."
read -p "VeritabanÄ± adÄ± [el_bar_db]: " DB_NAME
DB_NAME=${DB_NAME:-el_bar_db}

read -p "VeritabanÄ± kullanÄ±cÄ± adÄ± [root]: " DB_USER
DB_USER=${DB_USER:-root}

read -sp "VeritabanÄ± ÅŸifresi: " DB_PASS
echo ""

# .env dosyasÄ±nÄ± gÃ¼ncelle
sed -i "s/DB_DATABASE=.*/DB_DATABASE=$DB_NAME/" .env
sed -i "s/DB_USERNAME=.*/DB_USERNAME=$DB_USER/" .env
sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=$DB_PASS/" .env

success "VeritabanÄ± ayarlarÄ± .env dosyasÄ±na kaydedildi"

# Migration'larÄ± Ã§alÄ±ÅŸtÄ±r
echo ""
read -p "Migration'larÄ± Ã§alÄ±ÅŸtÄ±rmak istiyor musunuz? (y/n): " RUN_MIGRATE
if [ "$RUN_MIGRATE" = "y" ]; then
    echo "8. Migration'lar Ã‡alÄ±ÅŸtÄ±rÄ±lÄ±yor..."
    php artisan migrate --force || error "Migration baÅŸarÄ±sÄ±z"
    success "Migration'lar tamamlandÄ±"

    # Seed verilerini yÃ¼kle
    echo ""
    read -p "BaÅŸlangÄ±Ã§ verilerini (seed) yÃ¼klemek istiyor musunuz? (y/n): " RUN_SEED
    if [ "$RUN_SEED" = "y" ]; then
        echo "9. Seed Verileri YÃ¼kleniyor..."
        php artisan db:seed --force || error "Seed baÅŸarÄ±sÄ±z"
        success "Seed verileri yÃ¼klendi"
    fi
fi

# Storage link oluÅŸtur
echo ""
echo "10. Storage Link OluÅŸturuluyor..."
php artisan storage:link || warning "Storage link zaten mevcut olabilir"
success "Storage link oluÅŸturuldu"

# Ä°zinleri ayarla
echo ""
echo "11. Dosya Ä°zinleri AyarlanÄ±yor..."
chmod -R 775 storage bootstrap/cache || error "chmod baÅŸarÄ±sÄ±z"

# Web sunucu kullanÄ±cÄ±sÄ±nÄ± belirle
if id "www-data" &>/dev/null; then
    WEB_USER="www-data"
elif id "nginx" &>/dev/null; then
    WEB_USER="nginx"
elif id "apache" &>/dev/null; then
    WEB_USER="apache"
else
    warning "Web sunucu kullanÄ±cÄ±sÄ± bulunamadÄ±. Manuel olarak ayarlamanÄ±z gerekebilir."
    WEB_USER=$(whoami)
fi

chown -R $WEB_USER:$WEB_USER storage bootstrap/cache || warning "chown baÅŸarÄ±sÄ±z (sudo gerekebilir)"
success "Ä°zinler ayarlandÄ± (KullanÄ±cÄ±: $WEB_USER)"

# Cache oluÅŸtur
echo ""
echo "12. Cache OluÅŸturuluyor..."
php artisan config:cache || error "Config cache baÅŸarÄ±sÄ±z"
php artisan route:cache || error "Route cache baÅŸarÄ±sÄ±z"
php artisan view:cache || error "View cache baÅŸarÄ±sÄ±z"
success "Cache dosyalarÄ± oluÅŸturuldu"

# Ä°lk kullanÄ±cÄ± oluÅŸturma teklifi
echo ""
echo "=================================="
echo "Kurulum TamamlandÄ±! ðŸŽ‰"
echo "=================================="
echo ""
echo "Sonraki AdÄ±mlar:"
echo "1. Web sunucunuzu yapÄ±landÄ±rÄ±n (Apache/Nginx)"
echo "2. SSL sertifikasÄ± yÃ¼kleyin (Let's Encrypt Ã¶nerilir)"
echo "3. Admin kullanÄ±cÄ±sÄ± oluÅŸturun:"
echo "   php artisan tinker"
echo "   ArdÄ±ndan kullanÄ±cÄ± oluÅŸturma komutlarÄ±nÄ± Ã§alÄ±ÅŸtÄ±rÄ±n"
echo ""
echo "DetaylÄ± bilgi iÃ§in KURULUM_DOKUMANI.md dosyasÄ±na bakÄ±n."
echo ""
echo "Proje Dizini: $PROJECT_DIR"
echo "Public Dizini: $PROJECT_DIR/public (DocumentRoot burasÄ± olmalÄ±)"
echo ""

read -p "Ä°lk admin kullanÄ±cÄ±sÄ±nÄ± ÅŸimdi oluÅŸturmak istiyor musunuz? (y/n): " CREATE_USER
if [ "$CREATE_USER" = "y" ]; then
    echo ""
    read -p "Admin AdÄ±: " ADMIN_NAME
    read -p "Admin Email: " ADMIN_EMAIL
    read -sp "Admin Åžifresi: " ADMIN_PASS
    echo ""

    php artisan tinker --execute="
        \$user = new App\Models\User();
        \$user->name = '$ADMIN_NAME';
        \$user->email = '$ADMIN_EMAIL';
        \$user->password = Hash::make('$ADMIN_PASS');
        \$user->save();
        echo 'KullanÄ±cÄ± oluÅŸturuldu! ID: ' . \$user->id;
    "

    success "Admin kullanÄ±cÄ±sÄ± oluÅŸturuldu!"
    echo ""
    echo "GiriÅŸ Bilgileri:"
    echo "Email: $ADMIN_EMAIL"
    echo "Åžifre: (girdiÄŸiniz ÅŸifre)"
fi

echo ""
echo "=================================="
echo "Kurulum BaÅŸarÄ±lÄ±! âœ¨"
echo "=================================="
